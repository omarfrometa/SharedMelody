# =============================================
# SHARED MELODY - PRODUCTION DOCKER COMPOSE
# Production-ready setup with security
# =============================================

version: '3.8'

services:
  # =============================================
  # POSTGRESQL DATABASE
  # =============================================
  postgres:
    image: postgres:15-alpine
    container_name: sharedmelody_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/initial_data.sql:/docker-entrypoint-initdb.d/02-initial_data.sql
    networks:
      - sharedmelody_prod_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # =============================================
  # REDIS (Session Store)
  # =============================================
  redis:
    image: redis:7-alpine
    container_name: sharedmelody_redis_prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - sharedmelody_prod_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # =============================================
  # SHARED MELODY APPLICATION
  # =============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sharedmelody_app_prod
    restart: always
    env_file:
      - .env.production
    volumes:
      - app_prod_uploads:/app/server/uploads
      - app_prod_logs:/app/server/logs
      - ./keys:/app/server/keys:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sharedmelody_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # =============================================
  # NGINX REVERSE PROXY
  # =============================================
  nginx:
    image: nginx:alpine
    container_name: sharedmelody_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_prod_static:/var/www/html
    depends_on:
      - app
    networks:
      - sharedmelody_prod_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# =============================================
# VOLUMES
# =============================================
volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  app_prod_uploads:
    driver: local
  app_prod_logs:
    driver: local
  app_prod_static:
    driver: local

# =============================================
# NETWORKS
# =============================================
networks:
  sharedmelody_prod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16