# =============================================
# SHARED MELODY - DOCKER COMPOSE
# Frontend (React) + Backend (Node.js) + Database (PostgreSQL) + Redis
# =============================================

version: '3.8'

services:
  # =============================================
  # POSTGRESQL DATABASE
  # =============================================
  postgres:
    image: postgres:15-alpine
    container_name: sharedmelody_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sharedmelody_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/initial_data.sql:/docker-entrypoint-initdb.d/02-initial_data.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sharedmelody_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sharedmelody_network

  # =============================================
  # REDIS (Session Store)
  # =============================================
  redis:
    image: redis:7-alpine
    container_name: sharedmelody_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sharedmelody_network

  # =============================================
  # BACKEND (Node.js + Express + TypeScript)
  # =============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sharedmelody_backend
    restart: unless-stopped
    environment:
      # Server Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001

      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sharedmelody_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres_secure_password}
      DB_POOL_MAX: 20
      DB_POOL_MIN: 0
      DB_IDLE_TIMEOUT: 10000
      DB_CONNECTION_TIMEOUT: 30000

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}

      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}

      # Email Configuration
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-your-email@gmail.com}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-your-app-password}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@sharedmelody.com}

      # File Upload Configuration
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      UPLOAD_ALLOWED_TYPES: ${UPLOAD_ALLOWED_TYPES:-image/jpeg,image/png,image/gif,audio/mpeg,audio/wav,audio/flac}
      UPLOAD_DEST: ${UPLOAD_DEST:-./uploads}

      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}

      # OAuth Providers (Configure as needed)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      FACEBOOK_APP_ID: ${FACEBOOK_APP_ID:-}
      FACEBOOK_APP_SECRET: ${FACEBOOK_APP_SECRET:-}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID:-}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET:-}
      APPLE_CLIENT_ID: ${APPLE_CLIENT_ID:-}
      APPLE_TEAM_ID: ${APPLE_TEAM_ID:-}
      APPLE_KEY_ID: ${APPLE_KEY_ID:-}
      APPLE_PRIVATE_KEY_PATH: ${APPLE_PRIVATE_KEY_PATH:-./keys/apple-private-key.p8}

    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      # Mount SSL certificates or keys if needed
      # - ./keys:/app/keys:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sharedmelody_network

  # =============================================
  # FRONTEND (React + TypeScript + Material-UI)
  # =============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sharedmelody_frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "3000:80"  # Alternative port for development
    depends_on:
      - backend
    networks:
      - sharedmelody_network

# =============================================
# VOLUMES
# =============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

# =============================================
# NETWORKS
# =============================================
networks:
  sharedmelody_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16